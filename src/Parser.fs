// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open Ast
open Util
open Util.Format
open Microsoft.FSharp.Collections
open Microsoft.FSharp.Text.Lexing

type LineInfo = Position * Position

let pos ((p1, p2): LineInfo) : Ast.Position =
    {SLine = p1.Line; 
     SCol = p1.Column;
     ELine = p2.Line;
     ECol = p2.Column}

let range (p1: Ast.Position) (p2: Ast.Position) : Ast.Position =
    {SLine = p1.SLine; 
     SCol = p1.SCol;
     ELine = p2.ELine;
     ECol = p2.ECol}

let ident x : Ast.Ident = 
    {Pos = pos (fst x);
     Name = snd x}

let tuple (x : Ast.Expr list) : Ast.Node = 
    match x with 
    | [] -> failwith "unreachable"
    | [hd] -> hd.Node
    | hd1::hd2::tl -> Ast.Tuple (List.rev x)

# 39 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | PATH of (LineInfo)
  | LEQ of (LineInfo)
  | GEQ of (LineInfo)
  | LT of (LineInfo)
  | GT of (LineInfo)
  | SEMI of (LineInfo)
  | DOT of (LineInfo)
  | COMMA of (LineInfo)
  | RPAREN of (LineInfo)
  | LPAREN of (LineInfo)
  | EQUAL of (LineInfo)
  | EXISTS of (LineInfo)
  | MATCHES of (LineInfo)
  | IN of (LineInfo)
  | LET of (LineInfo)
  | ELSE of (LineInfo)
  | THEN of (LineInfo)
  | IF of (LineInfo)
  | MIN of (LineInfo)
  | MAX of (LineInfo)
  | TIMES of (LineInfo)
  | PLUS of (LineInfo)
  | OR of (LineInfo)
  | AND of (LineInfo)
  | NOT of (LineInfo)
  | INT of (LineInfo * int32)
  | ID of (LineInfo * string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_PATH
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_SEMI
    | TOKEN_DOT
    | TOKEN_COMMA
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_EQUAL
    | TOKEN_EXISTS
    | TOKEN_MATCHES
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_ELSE
    | TOKEN_THEN
    | TOKEN_IF
    | TOKEN_MIN
    | TOKEN_MAX
    | TOKEN_TIMES
    | TOKEN_PLUS
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_NOT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_exprs
    | NONTERM_expr
    | NONTERM_regex

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | PATH _ -> 1 
  | LEQ _ -> 2 
  | GEQ _ -> 3 
  | LT _ -> 4 
  | GT _ -> 5 
  | SEMI _ -> 6 
  | DOT _ -> 7 
  | COMMA _ -> 8 
  | RPAREN _ -> 9 
  | LPAREN _ -> 10 
  | EQUAL _ -> 11 
  | EXISTS _ -> 12 
  | MATCHES _ -> 13 
  | IN _ -> 14 
  | LET _ -> 15 
  | ELSE _ -> 16 
  | THEN _ -> 17 
  | IF _ -> 18 
  | MIN _ -> 19 
  | MAX _ -> 20 
  | TIMES _ -> 21 
  | PLUS _ -> 22 
  | OR _ -> 23 
  | AND _ -> 24 
  | NOT _ -> 25 
  | INT _ -> 26 
  | ID _ -> 27 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_PATH 
  | 2 -> TOKEN_LEQ 
  | 3 -> TOKEN_GEQ 
  | 4 -> TOKEN_LT 
  | 5 -> TOKEN_GT 
  | 6 -> TOKEN_SEMI 
  | 7 -> TOKEN_DOT 
  | 8 -> TOKEN_COMMA 
  | 9 -> TOKEN_RPAREN 
  | 10 -> TOKEN_LPAREN 
  | 11 -> TOKEN_EQUAL 
  | 12 -> TOKEN_EXISTS 
  | 13 -> TOKEN_MATCHES 
  | 14 -> TOKEN_IN 
  | 15 -> TOKEN_LET 
  | 16 -> TOKEN_ELSE 
  | 17 -> TOKEN_THEN 
  | 18 -> TOKEN_IF 
  | 19 -> TOKEN_MIN 
  | 20 -> TOKEN_MAX 
  | 21 -> TOKEN_TIMES 
  | 22 -> TOKEN_PLUS 
  | 23 -> TOKEN_OR 
  | 24 -> TOKEN_AND 
  | 25 -> TOKEN_NOT 
  | 26 -> TOKEN_INT 
  | 27 -> TOKEN_ID 
  | 30 -> TOKEN_end_of_input
  | 28 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_exprs 
    | 3 -> NONTERM_exprs 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_expr 
    | 10 -> NONTERM_expr 
    | 11 -> NONTERM_expr 
    | 12 -> NONTERM_expr 
    | 13 -> NONTERM_expr 
    | 14 -> NONTERM_expr 
    | 15 -> NONTERM_expr 
    | 16 -> NONTERM_expr 
    | 17 -> NONTERM_expr 
    | 18 -> NONTERM_expr 
    | 19 -> NONTERM_expr 
    | 20 -> NONTERM_expr 
    | 21 -> NONTERM_expr 
    | 22 -> NONTERM_expr 
    | 23 -> NONTERM_regex 
    | 24 -> NONTERM_regex 
    | 25 -> NONTERM_regex 
    | 26 -> NONTERM_regex 
    | 27 -> NONTERM_regex 
    | 28 -> NONTERM_regex 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 30 
let _fsyacc_tagOfErrorTerminal = 28

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | PATH _ -> "PATH" 
  | LEQ _ -> "LEQ" 
  | GEQ _ -> "GEQ" 
  | LT _ -> "LT" 
  | GT _ -> "GT" 
  | SEMI _ -> "SEMI" 
  | DOT _ -> "DOT" 
  | COMMA _ -> "COMMA" 
  | RPAREN _ -> "RPAREN" 
  | LPAREN _ -> "LPAREN" 
  | EQUAL _ -> "EQUAL" 
  | EXISTS _ -> "EXISTS" 
  | MATCHES _ -> "MATCHES" 
  | IN _ -> "IN" 
  | LET _ -> "LET" 
  | ELSE _ -> "ELSE" 
  | THEN _ -> "THEN" 
  | IF _ -> "IF" 
  | MIN _ -> "MIN" 
  | MAX _ -> "MAX" 
  | TIMES _ -> "TIMES" 
  | PLUS _ -> "PLUS" 
  | OR _ -> "OR" 
  | AND _ -> "AND" 
  | NOT _ -> "NOT" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | PATH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | GEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | GT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SEMI _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RPAREN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LPAREN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQUAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EXISTS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MATCHES _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ELSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | THEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MIN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MAX _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TIMES _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PLUS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 23us; 5us; 26us; 6us; 50us; 7us; 19us; 65535us; 0us; 2us; 8us; 9us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 23us; 4us; 26us; 4us; 37us; 28us; 38us; 29us; 39us; 30us; 40us; 31us; 41us; 32us; 50us; 4us; 57us; 33us; 58us; 34us; 59us; 35us; 60us; 36us; 5us; 65535us; 43us; 44us; 47us; 48us; 66us; 63us; 67us; 64us; 69us; 65us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 27us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 9us; 1us; 8us; 9us; 10us; 11us; 19us; 20us; 21us; 22us; 1us; 1us; 9us; 2us; 8us; 9us; 10us; 11us; 19us; 20us; 21us; 22us; 2us; 3us; 6us; 2us; 3us; 7us; 2us; 3us; 15us; 1us; 3us; 9us; 3us; 8us; 9us; 10us; 11us; 19us; 20us; 21us; 22us; 1us; 4us; 1us; 4us; 1us; 4us; 9us; 4us; 8us; 9us; 10us; 11us; 19us; 20us; 21us; 22us; 1us; 4us; 9us; 4us; 8us; 9us; 10us; 11us; 19us; 20us; 21us; 22us; 1us; 5us; 9us; 5us; 8us; 9us; 10us; 11us; 19us; 20us; 21us; 22us; 1us; 5us; 9us; 5us; 8us; 9us; 10us; 11us; 19us; 20us; 21us; 22us; 1us; 5us; 9us; 5us; 8us; 9us; 10us; 11us; 19us; 20us; 21us; 22us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 7us; 9us; 8us; 8us; 9us; 10us; 11us; 19us; 20us; 21us; 22us; 9us; 8us; 9us; 9us; 10us; 11us; 19us; 20us; 21us; 22us; 9us; 8us; 9us; 10us; 10us; 11us; 19us; 20us; 21us; 22us; 9us; 8us; 9us; 10us; 11us; 11us; 19us; 20us; 21us; 22us; 9us; 8us; 9us; 10us; 11us; 12us; 19us; 20us; 21us; 22us; 9us; 8us; 9us; 10us; 11us; 19us; 19us; 20us; 21us; 22us; 9us; 8us; 9us; 10us; 11us; 19us; 20us; 20us; 21us; 22us; 9us; 8us; 9us; 10us; 11us; 19us; 20us; 21us; 21us; 22us; 9us; 8us; 9us; 10us; 11us; 19us; 20us; 21us; 22us; 22us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 13us; 4us; 13us; 25us; 26us; 27us; 1us; 13us; 1us; 14us; 1us; 14us; 4us; 14us; 25us; 26us; 27us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 4us; 25us; 25us; 26us; 27us; 4us; 25us; 26us; 26us; 27us; 4us; 25us; 26us; 27us; 28us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 28us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 14us; 16us; 26us; 29us; 32us; 35us; 37us; 47us; 49us; 51us; 53us; 63us; 65us; 75us; 77us; 87us; 89us; 99us; 101us; 111us; 113us; 115us; 117us; 119us; 121us; 123us; 133us; 143us; 153us; 163us; 173us; 183us; 193us; 203us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 232us; 234us; 236us; 238us; 243us; 245us; 247us; 249us; 251us; 253us; 255us; 257us; 259us; 261us; 263us; 265us; 267us; 269us; 271us; 276us; 281us; 286us; 288us; 290us; 292us; 294us; |]
let _fsyacc_action_rows = 71
let _fsyacc_actionTableElements = [|11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 0us; 49152us; 9us; 32768us; 0us; 3us; 2us; 60us; 3us; 59us; 4us; 58us; 5us; 57us; 21us; 40us; 22us; 39us; 23us; 38us; 24us; 37us; 0us; 16385us; 8us; 16386us; 2us; 60us; 3us; 59us; 4us; 58us; 5us; 57us; 21us; 40us; 22us; 39us; 23us; 38us; 24us; 37us; 2us; 32768us; 8us; 8us; 9us; 24us; 2us; 32768us; 8us; 8us; 9us; 27us; 2us; 32768us; 8us; 8us; 9us; 51us; 11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 8us; 16387us; 2us; 60us; 3us; 59us; 4us; 58us; 5us; 57us; 21us; 40us; 22us; 39us; 23us; 38us; 24us; 37us; 1us; 32768us; 27us; 11us; 1us; 32768us; 11us; 12us; 11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 9us; 32768us; 2us; 60us; 3us; 59us; 4us; 58us; 5us; 57us; 14us; 14us; 21us; 40us; 22us; 39us; 23us; 38us; 24us; 37us; 11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 8us; 16388us; 2us; 60us; 3us; 59us; 4us; 58us; 5us; 57us; 21us; 40us; 22us; 39us; 23us; 38us; 24us; 37us; 11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 9us; 32768us; 2us; 60us; 3us; 59us; 4us; 58us; 5us; 57us; 17us; 18us; 21us; 40us; 22us; 39us; 23us; 38us; 24us; 37us; 11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 9us; 32768us; 2us; 60us; 3us; 59us; 4us; 58us; 5us; 57us; 16us; 20us; 21us; 40us; 22us; 39us; 23us; 38us; 24us; 37us; 11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 8us; 16389us; 2us; 60us; 3us; 59us; 4us; 58us; 5us; 57us; 21us; 40us; 22us; 39us; 23us; 38us; 24us; 37us; 1us; 32768us; 10us; 23us; 11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 0us; 16390us; 1us; 32768us; 10us; 26us; 11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 0us; 16391us; 6us; 16392us; 2us; 60us; 3us; 59us; 4us; 58us; 5us; 57us; 21us; 40us; 22us; 39us; 7us; 16393us; 2us; 60us; 3us; 59us; 4us; 58us; 5us; 57us; 21us; 40us; 22us; 39us; 24us; 37us; 1us; 16394us; 21us; 40us; 0us; 16395us; 0us; 16396us; 6us; 16403us; 2us; 60us; 3us; 59us; 4us; 58us; 5us; 57us; 21us; 40us; 22us; 39us; 6us; 16404us; 2us; 60us; 3us; 59us; 4us; 58us; 5us; 57us; 21us; 40us; 22us; 39us; 6us; 16405us; 2us; 60us; 3us; 59us; 4us; 58us; 5us; 57us; 21us; 40us; 22us; 39us; 6us; 16406us; 2us; 60us; 3us; 59us; 4us; 58us; 5us; 57us; 21us; 40us; 22us; 39us; 11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 1us; 32768us; 10us; 43us; 3us; 32768us; 7us; 61us; 10us; 69us; 27us; 62us; 4us; 32768us; 6us; 67us; 9us; 45us; 21us; 68us; 22us; 66us; 0us; 16397us; 1us; 32768us; 10us; 47us; 3us; 32768us; 7us; 61us; 10us; 69us; 27us; 62us; 4us; 32768us; 6us; 67us; 9us; 49us; 21us; 68us; 22us; 66us; 0us; 16398us; 11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 1us; 32768us; 7us; 55us; 1us; 32768us; 27us; 56us; 0us; 16402us; 11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 11us; 32768us; 1us; 54us; 10us; 50us; 12us; 46us; 13us; 42us; 15us; 10us; 18us; 16us; 19us; 22us; 20us; 25us; 25us; 41us; 26us; 52us; 27us; 53us; 0us; 16407us; 0us; 16408us; 2us; 16409us; 6us; 67us; 21us; 68us; 1us; 16410us; 21us; 68us; 4us; 32768us; 6us; 67us; 9us; 70us; 21us; 68us; 22us; 66us; 3us; 32768us; 7us; 61us; 10us; 69us; 27us; 62us; 3us; 32768us; 7us; 61us; 10us; 69us; 27us; 62us; 0us; 16411us; 3us; 32768us; 7us; 61us; 10us; 69us; 27us; 62us; 0us; 16412us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 12us; 13us; 23us; 24us; 33us; 36us; 39us; 42us; 54us; 63us; 65us; 67us; 79us; 89us; 101us; 110us; 122us; 132us; 144us; 154us; 166us; 175us; 177us; 189us; 190us; 192us; 204us; 205us; 212us; 220us; 222us; 223us; 224us; 231us; 238us; 245us; 252us; 264us; 276us; 288us; 300us; 312us; 314us; 318us; 323us; 324us; 326us; 330us; 335us; 336us; 348us; 349us; 350us; 351us; 353us; 355us; 356us; 368us; 380us; 392us; 404us; 405us; 406us; 409us; 411us; 416us; 420us; 424us; 425us; 429us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 3us; 6us; 6us; 4us; 4us; 3us; 3us; 3us; 3us; 2us; 4us; 4us; 3us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 3us; 3us; 2us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16397us; 65535us; 65535us; 65535us; 16398us; 65535us; 16399us; 16400us; 16401us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 65535us; 16407us; 16408us; 65535us; 65535us; 65535us; 65535us; 65535us; 16411us; 65535us; 16412us; |]
let _fsyacc_reductions ()  =    [| 
# 288 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 297 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                              _1 
                   )
# 79 "Parser.fsy"
                 : Ast.Expr));
# 308 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                                           [_1] 
                   )
# 82 "Parser.fsy"
                 : 'exprs));
# 319 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprs)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                                           _3 :: _1 
                   )
# 83 "Parser.fsy"
                 : 'exprs));
# 332 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                           {Pos = range (pos _1) _6.Pos; Node = Ast.Let (ident _2, _4, _6)} 
                   )
# 86 "Parser.fsy"
                 : 'expr));
# 348 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                           {Pos = range (pos _1) _6.Pos; Node = Ast.If (_2, _4, _6)} 
                   )
# 87 "Parser.fsy"
                 : 'expr));
# 364 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprs)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                                           {Pos = range (pos _1) (pos _2); Node = Ast.Min (List.rev _3) } 
                   )
# 88 "Parser.fsy"
                 : 'expr));
# 378 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprs)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                                           {Pos = range (pos _1) (pos _2); Node = Ast.Max (List.rev _3) } 
                   )
# 89 "Parser.fsy"
                 : 'expr));
# 392 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                              {Pos = range _1.Pos _3.Pos; Node = Ast.And (_1, _3)} 
                   )
# 90 "Parser.fsy"
                 : 'expr));
# 405 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                                              {Pos = range _1.Pos _3.Pos; Node = Ast.Or (_1, _3)} 
                   )
# 91 "Parser.fsy"
                 : 'expr));
# 418 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                              {Pos = range _1.Pos _3.Pos; Node = Ast.Plus (_1, _3)} 
                   )
# 92 "Parser.fsy"
                 : 'expr));
# 431 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                              {Pos = range _1.Pos _3.Pos; Node = Ast.Times (_1, _3)} 
                   )
# 93 "Parser.fsy"
                 : 'expr));
# 444 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                              {Pos = range (pos _1) _2.Pos; Node = Ast.Not _2} 
                   )
# 94 "Parser.fsy"
                 : 'expr));
# 456 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                                              {Pos = range (pos _1) (pos _4); Node = Ast.Matches _3 } 
                   )
# 95 "Parser.fsy"
                 : 'expr));
# 470 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                              {Pos = range (pos _1) (pos _4); Node = Ast.Exists _3 } 
                   )
# 96 "Parser.fsy"
                 : 'expr));
# 484 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprs)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                                              {Pos = range (pos _1) (pos _3); Node = tuple _2 } 
                   )
# 97 "Parser.fsy"
                 : 'expr));
# 497 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                           {Pos = pos (fst _1); Node = Ast.IntLiteral (snd _1)} 
                   )
# 98 "Parser.fsy"
                 : 'expr));
# 508 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                      {Pos = pos (fst _1); Node = Ast.Ident (ident _1)} 
                   )
# 99 "Parser.fsy"
                 : 'expr));
# 519 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                           {Pos = range (pos _1) (pos (fst _3)); Node = Ast.PathAttribute (ident _3, 1)} 
                   )
# 100 "Parser.fsy"
                 : 'expr));
# 532 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                           {Pos = range _1.Pos _3.Pos; Node = Ast.Gt(_1, _3)} 
                   )
# 101 "Parser.fsy"
                 : 'expr));
# 545 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                           {Pos = range _1.Pos _3.Pos; Node = Ast.Lt(_1, _3)} 
                   )
# 102 "Parser.fsy"
                 : 'expr));
# 558 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                           {Pos = range _1.Pos _3.Pos; Node = Ast.Geq(_1, _3)} 
                   )
# 103 "Parser.fsy"
                 : 'expr));
# 571 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                           {Pos = range _1.Pos _3.Pos; Node = Ast.Leq(_1, _3)} 
                   )
# 104 "Parser.fsy"
                 : 'expr));
# 584 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                           {Pos = pos _1; Value = Ast.Dot} 
                   )
# 108 "Parser.fsy"
                 : 'regex));
# 595 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                           {Pos = pos (fst _1); Value = Ast.Loc (ident _1) } 
                   )
# 109 "Parser.fsy"
                 : 'regex));
# 606 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                           {Pos = range _1.Pos _3.Pos; Value = Ast.Par (_1, _3)} 
                   )
# 110 "Parser.fsy"
                 : 'regex));
# 619 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                                           {Pos = range _1.Pos _3.Pos; Value = Ast.Seq (_1, _3)} 
                   )
# 111 "Parser.fsy"
                 : 'regex));
# 632 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                                           {Pos = range _1.Pos (pos _2); Value = Ast.Star _1} 
                   )
# 112 "Parser.fsy"
                 : 'regex));
# 644 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                                           {Pos = range (pos _1) (pos _3); Value = _2.Value} 
                   )
# 113 "Parser.fsy"
                 : 'regex));
|]
# 658 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 31;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Ast.Expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
