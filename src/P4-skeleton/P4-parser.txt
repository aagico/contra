/*************************************************************************
*********************** P A R S E R  ***********************************
*************************************************************************/

struct ingress_metadata_t {
    bit<16>  count;
}

struct parser_metadata_t {
    bit<16>  remaining;
}

struct metadata {
    ingress_metadata_t   ingress_metadata;
    parser_metadata_t   parser_metadata;
}


parser ParserImpl(packet_in packet,
out headers hdr,
inout metadata meta,
inout standard_metadata_t standard_metadata) {

    state start {
        transition parse_ethernet;
    }

    state parse_ethernet {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            TYPE_IPV4 : parse_ipv4;
            _         : accept;
        }
    }

    state parse_ipv4 {
        packet.extract(hdr.ipv4);

        transition select (hdr.ipv4.protocol) {
          HULAPP_PROTOCOL : parse_hulapp;
          _               : accept;
        }
    }

    state parse_hulapp {
        packet.extract(hdr.hulapp);
        meta.parser_metadata.remaining = hdr.hulapp.count;
        transition select(meta.parser_metadata.remaining) {
            0 : accept;
            _ : parse_metrics;
        }
    }

    state parse_metrics {
        packet.extract(hdr.metrics.next);
        meta.parser_metadata.remaining = meta.parser_metadata.remaining  - 1;
        transition select(meta.parser_metadata.remaining) {
            0 : accept;
            _ : parse_metrics;
        }
    }    
}


