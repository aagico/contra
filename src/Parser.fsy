%{
open System
open Ast
open Util
open Util.Format
open Microsoft.FSharp.Collections
open Microsoft.FSharp.Text.Lexing

type LineInfo = Position * Position

let pos ((p1, p2): LineInfo) : Ast.Position =
    {SLine = p1.Line; 
     SCol = p1.Column;
     ELine = p2.Line;
     ECol = p2.Column}

let range (p1: Ast.Position) (p2: Ast.Position) : Ast.Position =
    {SLine = p1.SLine; 
     SCol = p1.SCol;
     ELine = p2.ELine;
     ECol = p2.ECol}

let ident x : Ast.Ident = 
    {Pos = pos (fst x);
     Name = snd x}

let tuple (x : Ast.Expr list) : Ast.Node = 
    match x with 
    | [] -> failwith "unreachable"
    | [hd] -> hd.Node
    | hd1::hd2::tl -> Ast.Tuple (List.rev x)
%}


%start start
%type <Ast.Expr> start

%token <LineInfo * string> ID
%token <LineInfo * int32> INT
%token <LineInfo> NOT 
%token <LineInfo> AND 
%token <LineInfo> OR
%token <LineInfo> PLUS
%token <LineInfo> TIMES 
%token <LineInfo> MAX
%token <LineInfo> MIN
%token <LineInfo> IF
%token <LineInfo> THEN
%token <LineInfo> ELSE
%token <LineInfo> LET
%token <LineInfo> IN
%token <LineInfo> MATCHES
%token <LineInfo> EXISTS
%token <LineInfo> EQUAL
%token <LineInfo> LPAREN 
%token <LineInfo> RPAREN 
%token <LineInfo> COMMA 
%token <LineInfo> DOT
%token <LineInfo> SEMI
%token <LineInfo> GT
%token <LineInfo> LT
%token <LineInfo> GEQ
%token <LineInfo> LEQ
%token <LineInfo> PATH
%token EOF

%nonassoc THEN
%nonassoc ELSE
%left OR
%left AND
%nonassoc EQUALS GT LT GEQ LEQ
%left PLUS
%left SEMI
%left TIMES
%right NOT

%% 

start: expr EOF                        { $1 }

exprs:
	| expr                             { [$1] }
	| exprs COMMA expr                 { $3 :: $1 }

expr:
	| LET ID EQUAL expr IN expr        { {Pos = range (pos $1) $6.Pos; Node = Ast.Let (ident $2, $4, $6)} }
	| IF expr THEN expr ELSE expr      { {Pos = range (pos $1) $6.Pos; Node = Ast.If ($2, $4, $6)} }
	| MIN LPAREN exprs RPAREN          { {Pos = range (pos $1) (pos $2); Node = Ast.Min (List.rev $3) } }
	| MAX LPAREN exprs RPAREN          { {Pos = range (pos $1) (pos $2); Node = Ast.Max (List.rev $3) } }
    | expr AND expr                    { {Pos = range $1.Pos $3.Pos; Node = Ast.And ($1, $3)} }
    | expr OR expr                     { {Pos = range $1.Pos $3.Pos; Node = Ast.Or ($1, $3)} }
    | expr PLUS expr                   { {Pos = range $1.Pos $3.Pos; Node = Ast.Plus ($1, $3)} }
    | expr TIMES expr                  { {Pos = range $1.Pos $3.Pos; Node = Ast.Times ($1, $3)} }
    | NOT expr                         { {Pos = range (pos $1) $2.Pos; Node = Ast.Not $2} }
    | MATCHES LPAREN regex RPAREN      { {Pos = range (pos $1) (pos $4); Node = Ast.Matches $3 } }
    | EXISTS LPAREN regex RPAREN       { {Pos = range (pos $1) (pos $4); Node = Ast.Exists $3 } }
    | LPAREN exprs RPAREN              { {Pos = range (pos $1) (pos $3); Node = tuple $2 } }
	| INT                              { {Pos = pos (fst $1); Node = Ast.IntLiteral (snd $1)} }
	| ID							   { {Pos = pos (fst $1); Node = Ast.Ident (ident $1)} }
	| PATH DOT ID                      { {Pos = range (pos $1) (pos (fst $3)); Node = Ast.PathAttribute (ident $3, 1)} }
	| expr GT expr                     { {Pos = range $1.Pos $3.Pos; Node = Ast.Gt($1, $3)} }
	| expr LT expr                     { {Pos = range $1.Pos $3.Pos; Node = Ast.Lt($1, $3)} }
	| expr GEQ expr                    { {Pos = range $1.Pos $3.Pos; Node = Ast.Geq($1, $3)} }
	| expr LEQ expr                    { {Pos = range $1.Pos $3.Pos; Node = Ast.Leq($1, $3)} }


regex:
	| DOT                              { {Pos = pos $1; Value = Ast.Dot} }
	| ID                               { {Pos = pos (fst $1); Value = Ast.Loc (ident $1) } }
	| regex PLUS regex                 { {Pos = range $1.Pos $3.Pos; Value = Ast.Par ($1, $3)} }
	| regex SEMI regex                 { {Pos = range $1.Pos $3.Pos; Value = Ast.Seq ($1, $3)} } 
	| regex TIMES                      { {Pos = range $1.Pos (pos $2); Value = Ast.Star $1} }
	| LPAREN regex RPAREN              { {Pos = range (pos $1) (pos $3); Value = $2.Value} }