{
module Lexer
open System
open Parser
open Microsoft.FSharp.Text.Lexing

exception EofInComment

let inline newline (lexbuf: LexBuffer<_>) =
    lexbuf.EndPos <- lexbuf.EndPos.NextLine

let inline position (lexbuf: LexBuffer<_>) =
    (lexbuf.StartPos, lexbuf.EndPos)

let parseID (lexbuf: LexBuffer<_>) = 
    let s = LexBuffer<char>.LexemeString lexbuf
    ID (position lexbuf, s)

let parseInt (lexbuf : LexBuffer<_>) = 
    let s = LexBuffer<char>.LexemeString lexbuf
    let i = Int32.Parse s 
    INT (position lexbuf, i)
}

let digits = ['0'-'9']+ 
let id = ['a'-'z' 'A'-'Z' '_'] ['a'-'z' 'A'-'Z' '0'-'9' '_']*
let comment = "#" [^ '\n']* ['\n' '\r']

rule tokenize = parse
	| "/*"                  { comments 0 lexbuf } 
	| comment               { newline lexbuf; tokenize lexbuf } 
	| "not"	                { NOT (position lexbuf) }
	| "and"                 { AND (position lexbuf) }
	| "or"                  { OR (position lexbuf) }
	| "if"                  { IF (position lexbuf) }
	| "then"                { THEN (position lexbuf) }
	| "else"                { ELSE (position lexbuf) }
	| "matches"             { MATCHES (position lexbuf) }
	| "exists"              { EXISTS (position lexbuf) }
	| "max"                 { MAX (position lexbuf) }
	| "min"                 { MIN (position lexbuf) }
	| "let"                 { LET (position lexbuf) }
	| "in"                  { IN (position lexbuf) }
	| "path"                { PATH (position lexbuf) }
	| id                    { parseID lexbuf }
	| digits                { parseInt lexbuf }
	| '='                   { EQUAL (position lexbuf) }
	| '('                   { LPAREN (position lexbuf) }
	| ')'                   { RPAREN (position lexbuf) }
	| ','                   { COMMA (position lexbuf) }
	| '.'                   { DOT (position lexbuf) }
	| ';'                   { SEMI (position lexbuf) }
	| "+"                   { PLUS (position lexbuf) }
	| "*"                   { TIMES (position lexbuf) }
	| '<'                   { LT (position lexbuf) }
	| '>'                   { GT (position lexbuf) }
	| "<="                  { LEQ (position lexbuf) }
	| ">="                  { GEQ (position lexbuf) }
	| [' ' '\t' '\r']       { tokenize lexbuf }
	| '\n'                  { newline lexbuf; tokenize lexbuf }
	| eof                   { EOF }

and comments level = parse
	| "*/"                  { if level = 0 then tokenize lexbuf else comments (level-1) lexbuf }
	| "/*"                  { comments (level+1) lexbuf }
	| '\n'                  { newline lexbuf; comments level lexbuf }
	| _	                    { comments level lexbuf }
	| eof                   { raise EofInComment }